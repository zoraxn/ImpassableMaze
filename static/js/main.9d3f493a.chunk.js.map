{"version":3,"sources":["utils/constants.ts","utils/functions.ts","utils/wrappers/PannelWrapper.tsx","components/Maze/index.tsx","utils/commonStyles.tsx","config.ts","components/InfoBlock/index.tsx","App.tsx","index.tsx"],"names":["COLORS","generateMaze","size","maze","amaze","Backtracker","reset","generate","changePosition","position","sign","direction","get","x","y","getOppositeDirection","PanelWrapper","id","modal","fetching","children","popout","useMemo","activePanel","React","cloneElement","Canvas","styled","canvas","Container","div","Maze","prevPosition","viewWidth","useAdaptivity","ref","useRef","cellSize","ViewWidth","MOBILE","TABLET","useEffect","current","context","getContext","clearRect","width","height","fillStyle","i","j","fillRect","_generate","setTimeout","ctx","sln","solve","length","solveMaze","CommonStyles","createGlobalStyle","DIFF_MIN","GYROSCOPE_INIT","z","GYROSCOPE_INIT_CHANGE","velocity","previousPosition","previousVelocity","InfoBlock","titleText","valueText","header","level","weight","style","padding","main","withAdaptivity","useState","setLevel","setMaze","isAvailable","setIsAvailable","operation","setGyroscopeChange","gyroscopeData","setGyroscopeData","gyroscopeError","setGyroscopeError","console","log","setNextLevel","a","bridge","send","prev","subscribe","detail","type","schemeAttribute","document","createAttribute","value","data","scheme","body","attributes","setNamedItem","result","undefined","warn","parseFloat","pos","oppositeDir","oppositeSign","Math","difference","abs","speedX","speedY","mainDirection","secondaryDirection","toFixed","error_type","JSON","stringify","error_data","flex","then","res","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9d3f493a.chunk.js","sourcesContent":["export const COLORS = {\r\n  red: '#e74c3c',\r\n  blue: '#3498db',\r\n  playerColor: '#ffd800',\r\n  mazeEdge: 'rgba(5,13,71,0.9)',\r\n  mazeBackground: '#ffe3e3',\r\n  startPosition: '#d500ff',\r\n  endPosition: '#9702a0',\r\n  pathColor: 'rgba(227,149,255,0.32)',\r\n};\r\n","import { RefObject } from 'react'\r\nimport { GyroscopeData2D, Direction } from '@limbus-mini-apps';\r\nimport amaze from 'amazejs';\r\nimport {COLORS} from \"./constants\";\r\n\r\nexport const generateMaze = (size = 60) => {\r\n  const maze = new amaze.Backtracker(size, size);\r\n  maze.reset();\r\n  maze.generate();\r\n  return maze;\r\n};\r\n\r\n\r\nexport const _generate = (maze: amaze.Backtracker, cellSize: number, ref: RefObject<HTMLCanvasElement>) => {\r\n  if (ref.current) {\r\n    ref.current.width = maze.width * cellSize;\r\n    ref.current.height = maze.height * cellSize;\r\n\r\n    const context = ref.current.getContext('2d');\r\n\r\n    if (context) {\r\n      context.fillStyle = COLORS.mazeBackground;\r\n      for (let i = 0; i < maze.width; i++) {\r\n        for (let j = 0; j < maze.height; j++) {\r\n          if (maze.get(i, j)) {\r\n            context.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const solveMaze = (maze: amaze.Backtracker, cellSize: number, ref: RefObject<HTMLCanvasElement>) => {\r\n  if (ref.current) {\r\n    const ctx = ref.current.getContext('2d');\r\n    const sln = maze.solve([1, 1], [maze.height - 2, maze.width - 2]);\r\n\r\n    if (ctx) {\r\n      ctx.fillStyle = COLORS.pathColor;\r\n\r\n      for (let i = 0; i < sln.length; i++) {\r\n        ctx.fillRect(sln[i][0] * cellSize, sln[i][1] * cellSize, cellSize, cellSize);\r\n      }\r\n\r\n      ctx.fillStyle = COLORS.startPosition;\r\n      ctx.fillRect(cellSize, cellSize, cellSize, cellSize);\r\n\r\n      ctx.fillStyle = COLORS.endPosition;\r\n      ctx.fillRect(cellSize * (maze.width - 2), cellSize * (maze.height - 2), cellSize, cellSize);\r\n    }\r\n  }\r\n};\r\n\r\nexport const changePosition = (position: GyroscopeData2D, sign: number, direction: Direction, maze: amaze.Backtracker): number => {\r\n  switch (direction) {\r\n    case 'x': {\r\n      if (sign < 0 && maze.get(position.x - 1, position.y)) {\r\n        return position.x - 1;\r\n      }\r\n\r\n      if (sign > 0 && maze.get(position.x + 1, position.y)) {\r\n        return position.x + 1;\r\n      }\r\n\r\n      return position.x;\r\n    }\r\n\r\n    case 'y': {\r\n      if (sign < 0 && maze.get(position.x, position.y - 1)) {\r\n        return position.y - 1;\r\n      }\r\n\r\n      if (sign > 0 && maze.get(position.x, position.y + 1)) {\r\n        return position.y + 1;\r\n      }\r\n\r\n      return position.y;\r\n    }\r\n  }\r\n}\r\n\r\nexport const getOppositeDirection = (x: Direction): Direction => x !== 'x' ? 'x' : 'y';\r\n\r\nexport const getDirection = (x: number, y: number): Direction => Math.abs(x) <= Math.abs(y) ? 'x': 'y';\r\n","import React, { useMemo } from 'react';\r\nimport { View, ScreenSpinner } from '@vkontakte/vkui';\r\n\r\ntype PanelWrapperProps = {\r\n  id: string;\r\n  modal?: React.ReactNode;\r\n  fetching?: boolean;\r\n  children: JSX.Element;\r\n};\r\n\r\nexport const PanelWrapper: React.FC<PanelWrapperProps> = ({ id, modal, fetching, children }: PanelWrapperProps) => {\r\n  const popout = useMemo(() => {\r\n    return fetching ? <ScreenSpinner /> : null;\r\n  }, [fetching]);\r\n\r\n  return (\r\n    <View activePanel={id} modal={modal} popout={popout}>\r\n      {React.cloneElement(children, { id })}\r\n    </View>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAdaptivity, ViewWidth, Group } from '@vkontakte/vkui';\r\nimport { GyroscopeData2D } from '@limbus-mini-apps';\r\nimport amaze from 'amazejs';\r\n\r\nimport { COLORS } from '../../utils/constants';\r\nimport { _generate, solveMaze } from '../../utils/functions';\r\n\r\nconst Canvas = styled.canvas`\r\n  background-color: ${COLORS.mazeEdge};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  padding: 0.5rem 1rem;\r\n`;\r\n\r\nexport type MazeProps = {\r\n  maze: amaze.Backtracker;\r\n  position: GyroscopeData2D;\r\n  prevPosition: GyroscopeData2D;\r\n};\r\n\r\nexport const Maze: React.FC<MazeProps> = ({ maze, position, prevPosition }) => {\r\n  const { viewWidth } = useAdaptivity();\r\n\r\n  const ref = useRef<HTMLCanvasElement>(null);\r\n\r\n  const cellSize = useMemo(() => {\r\n    switch (viewWidth) {\r\n      case ViewWidth.MOBILE:\r\n        return 10;\r\n      case ViewWidth.TABLET:\r\n        return 16;\r\n      default:\r\n        return 32;\r\n    }\r\n  }, [viewWidth]);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      const context = ref.current.getContext('2d');\r\n      if (context) {\r\n        context.clearRect(0, 0, ref.current.width, ref.current.height);\r\n      }\r\n    }\r\n    _generate(maze, cellSize, ref);\r\n    setTimeout(() => solveMaze(maze, cellSize, ref), 500);\r\n  }, [maze, ref, cellSize]);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      const context = ref.current.getContext('2d');\r\n      if (context) {\r\n        context.fillStyle = COLORS.mazeBackground;\r\n        context.fillRect(prevPosition.x * cellSize, prevPosition.y * cellSize, cellSize, cellSize);\r\n\r\n        context.fillStyle = COLORS.playerColor;\r\n        context.fillRect(position.x * cellSize, position.y * cellSize, cellSize, cellSize);\r\n      }\r\n    }\r\n  }, [maze, position, prevPosition, ref, cellSize]);\r\n\r\n  return (\r\n    <Group>\r\n      <Container>\r\n        <Canvas ref={ref} />\r\n      </Container>\r\n    </Group>\r\n  );\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const CommonStyles = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n","import {Direction, GyroscopeData2D, GyroscopeData3D} from \"@limbus-mini-apps\";\r\n\r\n\r\nexport const DIFF_MAX = 0.1;\r\nexport const DIFF_MIN = 0.02;\r\nexport const START_LEVEL = 1;\r\nexport const START_MAZE_SIZE = 3;\r\nexport const CELL_SIZE = 8;\r\nexport const SPEED_MULTIPLIER_X = 0.006;\r\nexport const SPEED_MULTIPLIER_Y = 0.008;\r\nexport const GYROSCOPE_INIT: GyroscopeData3D = {\r\n  x: 0,\r\n  y: 0,\r\n  z: 0,\r\n};\r\n\r\nexport type GyroscopeChange = {\r\n  position: GyroscopeData2D;\r\n  velocity: GyroscopeData2D;\r\n  previousPosition: GyroscopeData2D;\r\n  previousVelocity: GyroscopeData2D;\r\n} & Partial<{\r\n  sign: number;\r\n  direction: Direction;\r\n}>;\r\n\r\nexport const GYROSCOPE_INIT_CHANGE: GyroscopeChange = {\r\n  position: { x: 1, y: 1 },\r\n  velocity: { x: 0, y: 0 },\r\n  previousPosition: { x: 1, y: 1 },\r\n  previousVelocity: { x: 0, y: 0 },\r\n};\r\n","import {Group, Headline, Title} from \"@vkontakte/vkui\";\r\nimport React from \"react\";\r\n\r\ntype InfoBlockProps = {\r\n    titleText: string;\r\n    valueText: string;\r\n};\r\n\r\nexport const InfoBlock: React.FC<InfoBlockProps> = ({titleText, valueText}) => {\r\n  return (\r\n    <Group\r\n    header={\r\n      <Title level=\"2\" weight=\"bold\">\r\n        {titleText}\r\n      </Title>\r\n    }\r\n    style={{ padding: '0.3rem' }}\r\n    >\r\n    <Headline weight=\"regular\">\r\n      {valueText}\r\n    </Headline>\r\n  </Group>\r\n  );\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport styled from 'styled-components';\r\nimport {\r\n  ConfigProvider,\r\n  AdaptivityProvider,\r\n  AppRoot,\r\n  SplitLayout,\r\n  Panel,\r\n  Group,\r\n  PanelHeader,\r\n  withAdaptivity,\r\n} from '@vkontakte/vkui';\r\nimport amaze from 'amazejs';\r\nimport bridge, { VKBridgeEvent, AnyReceiveMethodName, ErrorData } from '@vkontakte/vk-bridge';\r\nimport { GyroscopeData2D, GyroscopeData3D } from '@limbus-mini-apps';\r\n\r\nimport { generateMaze, getDirection, getOppositeDirection, changePosition } from './utils/functions';\r\nimport { PanelWrapper } from './utils/wrappers';\r\nimport { Maze } from './components/Maze';\r\nimport { CommonStyles } from './utils/commonStyles';\r\nimport {\r\n  DIFF_MAX,\r\n  DIFF_MIN,\r\n  GYROSCOPE_INIT,\r\n  GYROSCOPE_INIT_CHANGE,\r\n  START_LEVEL,\r\n  CELL_SIZE,\r\n  START_MAZE_SIZE,\r\n  GyroscopeChange, SPEED_MULTIPLIER_X, SPEED_MULTIPLIER_Y\r\n} from \"./config\";\r\nimport {InfoBlock} from \"./components/InfoBlock\";\r\n\r\nconst Container = styled.main`\r\n  width: 100%;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n  const [level, setLevel] = useState(START_LEVEL);\r\n  const [maze, setMaze] = useState<amaze.Backtracker>(generateMaze(START_MAZE_SIZE + CELL_SIZE * level));\r\n  const [isAvailable, setIsAvailable] = useState<boolean>();\r\n  const [operation, setGyroscopeChange] = useState<GyroscopeChange>(GYROSCOPE_INIT_CHANGE);\r\n  const [gyroscopeData, setGyroscopeData] = useState<GyroscopeData3D>(GYROSCOPE_INIT);\r\n  const [gyroscopeError, setGyroscopeError] = useState<ErrorData>();\r\n\r\n  useEffect(() => {\r\n    const size = START_MAZE_SIZE + CELL_SIZE * level;\r\n    if (size !== maze.width) {\r\n      setMaze(() => generateMaze(START_MAZE_SIZE + CELL_SIZE * level));\r\n      console.log('New maze generated');\r\n    }\r\n  }, [maze.width, level, setMaze]);\r\n\r\n  useEffect(() => {\r\n    const setNextLevel = async () => {\r\n      if (maze && operation.position.x === maze.width - 2 && operation.position.y === maze.height - 2) {\r\n        await bridge.send('VKWebAppGyroscopeStop');\r\n        setTimeout(() => {\r\n          setLevel((prev) => prev + 1);\r\n          setGyroscopeChange(() => GYROSCOPE_INIT_CHANGE);\r\n        }, 1000);\r\n      }\r\n    };\r\n    setNextLevel();\r\n  }, [maze, operation, setLevel]);\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    bridge.send('VKWebAppGyroscopeStart', {\"refresh_rate\": 80});\r\n    bridge.subscribe(({ detail }: VKBridgeEvent<AnyReceiveMethodName>) => {\r\n      switch (detail.type) {\r\n        case 'VKWebAppUpdateConfig': {\r\n          const schemeAttribute = document.createAttribute('scheme');\r\n          schemeAttribute.value = detail.data.scheme ? detail.data.scheme : 'client_light';\r\n          document.body.attributes.setNamedItem(schemeAttribute);\r\n          break;\r\n        }\r\n\r\n        case 'VKWebAppGyroscopeStartResult': {\r\n          setIsAvailable(() => detail.data.result);\r\n          break;\r\n        }\r\n\r\n        case 'VKWebAppGyroscopeStartFailed': {\r\n          setGyroscopeError(() => detail.data);\r\n          break;\r\n        }\r\n\r\n        case 'VKWebAppGyroscopeChanged': {\r\n          if (maze === undefined) {\r\n            console.warn('Maze is undefined!')\r\n            return;\r\n          }\r\n          const data = {\r\n            x: parseFloat(detail.data.x),\r\n            y: parseFloat(detail.data.y),\r\n            z: parseFloat(detail.data.z),\r\n          };\r\n          setGyroscopeData(() => data);\r\n          setGyroscopeChange((pos) => {\r\n            if (pos.direction && pos.sign) {\r\n              const oppositeDir = getOppositeDirection(pos.direction);\r\n              const oppositeSign = Math.sign(data[oppositeDir]);\r\n              const difference = Math.abs(data[oppositeDir] - pos.velocity[oppositeDir]);\r\n\r\n              if (difference <= DIFF_MAX || (difference > DIFF_MIN && pos.sign === oppositeSign)) {\r\n                return {\r\n                  sign: pos.sign,\r\n                  direction: pos.direction,\r\n                  previousPosition: pos.position,\r\n                  previousVelocity: pos.velocity,\r\n                  position: {\r\n                    [oppositeDir]: pos.position[oppositeDir],\r\n                    [pos.direction]: changePosition(pos.position, pos.sign, pos.direction, maze),\r\n                  } as GyroscopeData2D,\r\n                  velocity: { x: data.x * SPEED_MULTIPLIER_X, y: data.y * SPEED_MULTIPLIER_Y },\r\n                };\r\n              }\r\n            }\r\n\r\n            if (Math.abs(data.x) > DIFF_MIN || Math.abs(data.y) > DIFF_MIN) {\r\n              const speedX = data.x * SPEED_MULTIPLIER_X;\r\n              const speedY = data.y * SPEED_MULTIPLIER_Y;\r\n              const mainDirection = getDirection(speedX, speedY);\r\n              const secondaryDirection = getOppositeDirection(mainDirection);\r\n              const sign = Math.abs(speedX) > Math.abs(speedY) ? Math.sign(speedX) : Math.sign(speedY);\r\n              return {\r\n                sign,\r\n                direction: mainDirection,\r\n                position: {\r\n                  [secondaryDirection]: pos.position[secondaryDirection],\r\n                  [mainDirection]: changePosition(pos.position, Math.sign(speedX), mainDirection, maze),\r\n                } as GyroscopeData2D,\r\n                velocity: { x: speedX, y: speedY },\r\n                previousPosition: pos.position,\r\n                previousVelocity: pos.velocity,\r\n              };\r\n            }\r\n            return pos;\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      return () => {\r\n        bridge.send('VKWebAppGyroscopeStop');\r\n      };\r\n    });\r\n  }, [maze]);\r\n\r\n  return (\r\n    <ConfigProvider>\r\n      <AdaptivityProvider>\r\n        <AppRoot>\r\n          <SplitLayout>\r\n            <Container>\r\n              <CommonStyles />\r\n\r\n              <PanelWrapper id=\"home\">\r\n                <Panel id=\"home\">\r\n                  <PanelHeader>Непроходимый лабиринт by Romb</PanelHeader>\r\n                  {!isAvailable ?\r\n                      <InfoBlock\r\n                          titleText={`Ошибка`}\r\n                          valueText={'Гироскоп не доступен!'}\r\n                      /> : undefined\r\n                  }\r\n\r\n                  {isAvailable ? (\r\n                      <InfoBlock\r\n                          titleText={`Gyroscope received data:`}\r\n                          valueText={\r\n                            `x: ${gyroscopeData.x.toFixed(2)},\r\n                         y: ${gyroscopeData.y.toFixed(3)},\r\n                         z: ${gyroscopeData.z.toFixed(2)}`\r\n                          }\r\n                      />\r\n                  ) : undefined}\r\n\r\n\r\n                  {gyroscopeError && (\r\n                      <InfoBlock\r\n                          titleText={'Error'}\r\n                          valueText={`\r\n                            ${gyroscopeError.error_type}\\n\r\n                            ${JSON.stringify(gyroscopeError.error_data)}\r\n                          `}\r\n                      />\r\n                  )}\r\n\r\n                  {maze && (\r\n                    <Group  style={{flex:1}}>\r\n                      <Maze maze={maze} position={operation.position} prevPosition={operation.previousPosition} />\r\n                    </Group>\r\n                  )}\r\n                </Panel>\r\n              </PanelWrapper>\r\n            </Container>\r\n          </SplitLayout>\r\n        </AppRoot>\r\n      </AdaptivityProvider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default withAdaptivity(App, { viewWidth: true });\r\n","import 'core-js/features/map';\r\nimport 'core-js/features/set';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport App from './App';\r\n\r\nbridge.send('VKWebAppInit').then(res => console.log(res));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nif (process.env.NODE_ENV === 'development') {\r\n  import('./eruda').then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}